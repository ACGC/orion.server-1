<project name="WebIDE customTargets overrides" >

	<property name="super" value="Build specific targets and properties" />
	<import file="${eclipse.pdebuild.templates}/headless-build/customTargets.xml"/>
	
	<!-- Map files are here in the releng project -->
	<target name="getMapFiles"  unless="skipMaps">
		<!--<property name="mapsCheckoutTag" value="HEAD" /> -->
		<mkdir dir="${buildDirectory}/maps" />
		
		<!--
		<exec executable="git" dir="${buildDirectory}/maps">
			<arg line="archive -format=tar -remote=ssh://dev.eclipse.org/gitroot/e4/org.eclipse.orion.server.git master releng/org.eclipse.orion.releng/maps | tar -xf -" />
		</exec>
		
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
		<antcall target="${super}.getMapFiles" />
			
		<antcall target="compareMapFiles"/>
		<antcall target="tagMapFiles" />
		-->
		<copy todir="${buildDirectory}/maps">
			<fileset dir="${builder}/../maps" />
		</copy>
		
		<replace dir="${buildDirectory}/maps/" value="${eclipsePlatformRepo}" token="ECLIPSE_PLATFORM_REPO" />
		<antcall target="replaceUser" />
	</target>
	
	<target name="replaceUser" if="gitUser" >
		<replace dir="${buildDirectory}/maps/" value="repo=${gitUser}@dev.eclipse.org:/gitroot" token="repo=dev.eclipse.org:/gitroot" />
	</target>
	
	<target name="tagMapFiles" if="tagMaps" >
		<echo file="${mapTagFile}">
lastMapTag=${mapsTagTag}
		</echo>
		<antcall target="${super}.tagMapFiles" />
	</target>
		
	<target name="compareMapFiles" if="compareMaps">
		<echo message="${mapTagFile}" />
		<property file="${mapTagFile}" />
		<property name="cvsDiff" value="${buildDirectory}/cvsDiff.txt" />
		<cvs cvsRoot="${mapsRepo}" dest="${builder}/../maps" command="diff -w -r ${lastMapTag}" output="${cvsDiff}" />
		<modifiedMaps mapDiffFile="${cvsDiff}" />
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
		<p2.mirror source="${eclipsePlatformRepo}" destination="${repoBaseLocation}/launchers">
			<slicingOptions includeOptional="false" includeNonGreedy="false" latestVersionOnly="true"/>
			<iu id="org.eclipse.equinox.executable.feature.group" version=""/>
		</p2.mirror>
	</target>
		
	<target name="postFetch">
		<replace dir="${buildDirectory}" includes="pluginVersions.properties,featureVersions.properties"  >
			<replacefilter token="HEAD" value="${buildLabel}" />
			<replacefilter token="origin/master" value="${buildLabel}" />
		</replace>
		<replace dir="${buildDirectory}" includes="sourceReferences.properties" token="${gitUser}@" value="" />
		
		<available property="jsdocHome" value="${base}/jsdoc-toolkit" file="${base}/jsdoc-toolkit" />
		<available property="requirejsHome" value="${base}/requirejs" file="${base}/requirejs" />
		<property name="closureJar" value="/shared/common/closure/compiler.jar" />

		<antcall target="jsdocs" />
		<antcall target="requirejs" />
		
		<!--
		<ant dir="${basedir}" antfile="${builder}/scripts/closure.xml" target="runClosure" >
			<property name="orion.client.core" value="${buildDirectory}/plugins/org.eclipse.orion.client.core/static"/>
			<property name="orion.client.editor" value="${buildDirectory}/plugins/org.eclipse.orion.client.editor/web"/>
			<property name="orion.client.git" value="${buildDirectory}/plugins/org.eclipse.orion.client.git/static"/>
		</ant>
		-->
	</target>
	
	<target name="jsdocs" if="jsdocHome" >
		<java jar="${jsdocHome}/jsrun.jar" fork="true"> 
			<arg line="${jsdocHome}/app/run.js -s -v -a " />
			<arg value="-r=3" />
			<arg value="-t=${jsdocHome}/templates/jsdoc" />
			<arg value="-d=${buildDirectory}/plugins/org.eclipse.orion.doc.isv/jsdoc" />
			<arg value="${buildDirectory}/plugins/org.eclipse.orion.client.core/static/js/" />
			<arg value="${buildDirectory}/plugins/org.eclipse.orion.client.editor/web/js/" />
			<arg value="${buildDirectory}/plugins/org.eclipse.orion.client.git/static/js/" />
			<arg value="${buildDirectory}/plugins/org.eclipse.orion.client.users.ui/static/profile/js/" />
		</java>
	</target>
	
	<macrodef name="optimize" >
		<attribute name="name" />
		<attribute name="appDir" default="@{name}" />
		<sequential>
			<java classname="org.mozilla.javascript.tools.shell.Main" fork="true" 
				  dir="${buildDirectory}/optimization">
				<classpath>
					<pathelement location="${requirejsHome}/build/lib/rhino/js.jar" />
					<pathelement location="${requirejsHome}/build/lib/closure/compiler.jar" />
				</classpath>
				<arg value="${requirejsHome}/bin/x.js"/>
				<arg value="${requirejsHome}/bin"/>
				<arg value="${requirejsHome}/build/build.js"/>
				<arg value="./orion.build.js"/>
				<arg value="optimize=closure" />
				<arg value="name=@{name}" />
				<arg value="out=@{appDir}/built-@{name}.js"/>
				<arg value="appDir=@{appDir}" />
				<arg value="baseUrl=." />
				<arg value="dir=." />
			</java>
			
			<replace file="${buildDirectory}/optimization/@{appDir}/@{name}.html" token="require([&quot;@{name}&quot;]);" value="require([&quot;built-@{name}&quot;]);" />
			<copy todir="${buildDirectory}/plugins/org.eclipse.orion.client.core/static/@{appDir}" >
				<fileset dir="${buildDirectory}/optimization/@{appDir}" includes="built-@{name}.js, @{name}.html" />
			</copy>
		</sequential>
	</macrodef>
	
	<target name="requirejs" if="requirejsHome" >
		<delete dir="${buildDirectory}/optimization" />
		<copy file="${builder}/scripts/orion.build.js" tofile="${buildDirectory}/optimization/orion.build.js" overwrite="true"/>

		<!-- Stage files for optimization --> 
		<pathconvert property="dojoJar" >
			<last><sort><fileset dir="${transformedRepoLocation}/plugins" includes="org.dojotoolkit_*.jar" /></sort></last>
		</pathconvert>
		<property name="dojoFolder" value="${buildDirectory}/optimization/org.dojotoolkit" />
		<mkdir dir="${dojoFolder}" />
		<unzip src="${dojoJar}" dest="${dojoFolder}" overwrite="false"/>

		<copy todir="${buildDirectory}/optimization" >
			<fileset dir="${buildDirectory}/plugins/org.eclipse.orion.client.core/static" includes="**"/>
		</copy>
		<copy todir="${dojoFolder}" >
			<fileset dir="${buildDirectory}/plugins/org.eclipse.orion.client.core/static" includes="dojox/**" />
		</copy>
		
		<!-- invoke requirejs -->
		<optimize appDir="navigate" name="table" />
		<optimize appDir="navigate" name="tree" />
		<optimize name="edit" />
		<optimize name="compare" />
		<optimize name="search" />
		<optimize appDir="sites" name="site" />
		<optimize appDir="sites" name="sites" />
		
		<java classname="org.mozilla.javascript.tools.shell.Main">
			<classpath>
				<pathelement location="${requirejsHome}/build/lib/rhino/js.jar" />
				<pathelement location="${closureJar}" />
			</classpath>
			<arg value="${requirejsHome}/bin/x.js"/>
			<arg value="${requirejsHome}/bin"/>
			<arg value="${requirejsHome}/build/build.js"/>
			<arg value="${builder}/scripts/orion.build.js"/>
			<arg value="optimize=none" />
			<arg value="appDir=${buildDirectory}/optimization" />
			<arg value="dir=${buildDirectory}/optimization" />
		</java>

		<!-- copy css back -->
		<copy todir="${buildDirectory}/plugins/org.eclipse.orion.client.core/static" >
			<fileset dir="${buildDirectory}/optimization" includes="**/*.css" excludes="org.dojotoolkit/"/>
		</copy>
	</target>
		
	<target name="preGenerate">
		<replace file="${buildDirectory}/features/org.eclipse.pde.build.container.feature/feature.xml" token="1.0.0" value="0.2.0.qualifier" />
	</target>

	<macrodef name="adjustInfoPlist">
		<attribute name="suffix" />
		<sequential>
			<pathconvert property="macRootArchive.@{suffix}" >
				<last><sort><fileset dir="${buildDirectory}/buildRepo/binary" includes="org.eclipse.orion_root.@{suffix}*" /></sort></last>
			</pathconvert>
			
			<mkdir dir="${buildDirectory}/rootMacosx/@{suffix}"/>
			<unzip src="${macRootArchive.@{suffix}}" dest="${buildDirectory}/rootMacosx/@{suffix}" overwrite="true" />
			<replace file="${buildDirectory}/rootMacosx/@{suffix}/eclipse.app/Contents/Info.plist">
				<replacetoken>CFBundleExecutable</replacetoken>
				<replacevalue>LSBackgroundOnly&lt;/key&gt;
			&lt;string&gt;1&lt;/string&gt;
		&lt;key&gt;CFBundleExecutable</replacevalue>
			</replace>
			<zip destfile="${macRootArchive.@{suffix}}" basedir="${buildDirectory}/rootMacosx/@{suffix}" includes="**"/>
		</sequential>
	</macrodef>

	<target name="postAssemble">
		<adjustInfoPlist suffix="cocoa.macosx.x86" />
		<adjustInfoPlist suffix="cocoa.macosx.x86_64" />
		<p2.process.artifacts repositoryPath="file:${buildDirectory}/buildRepo" />
	</target>	
	
	<target name="postBuild" >
		<property name="buildResultLocation" value="${buildDirectory}/${buildLabel}" />
		<property name="dropLocation" value="${buildResultLocation}/drop" />
		<mkdir dir="${dropLocation}" />

		<antcall target="gatherLogs" />
		<antcall target="launchWebIDE" />
		<antcall target="copyResults" />
		
		<mkdir dir="${buildDirectory}/formatRepo" />
		<copy file="${builder}/html/artifacts.xml" todir="${buildDirectory}/formatRepo" />
		<replace file="${buildDirectory}/formatRepo/artifacts.xml" token="@REPO@" value="0.2-${buildType}-builds/${buildLabel}" />
		
		<p2.mirror source="file:${p2.metadata.repo}" log="${buildDirectory}/${buildLabel}/mirrorLog.txt" ignoreErrors="true" >
			<slicingOptions latestVersionOnly="true"/>
			<destination compressed="true" name="Orion ${buildLabel} metadata" location="file:${updateSite}/${buildLabel}" append="true" format="file:${p2.repo}" kind="metadata" />
			<destination compressed="true" name="Orion ${buildLabel} artifacts" location="file:${updateSite}/${buildLabel}" append="true" format="file:${buildDirectory}/formatRepo" kind="artifact"/>
			<comparator comparator="org.eclipse.equinox.p2.repository.tools.jar.comparator" comparatorLog="${dropLocation}/comparatorlog.txt">
				<repository location="file:${updateSite}" />
			</comparator>
		</p2.mirror>
        <p2.composite.artifact.repository.add location="file:${updateSite}" child="${buildLabel}" />
        <p2.composite.metadata.repository.add location="file:${updateSite}" child="${buildLabel}" />
	</target>
	
	<target name="copyResults"  >
		<zip destFile="${dropLocation}/compileLogs-${buildLabel}.zip" basedir="${buildResultLocation}/compilelogs/plugins" includes="**" />
		<copy todir="${dropLocation}" >
			<fileset dir="${buildResultLocation}" includes="${archiveNamePrefix}*" />
		</copy>	

		<!-- generate the build index, guess the component version numbers -->
		<filter token="repmaindate" value="${TODAY}" />
		<filter token="repbuildlabel" value="${buildLabel}" />
		<copy filtering="true" file="${builder}/html/build.index.html" tofile="${dropLocation}/index.html" />
		<copy file="${builder}/html/build.download.php" tofile="${dropLocation}/download.php" />

		<copy file="${buildResultLocation}/../directory.txt" tofile="${dropLocation}/directory.txt" />
		<available file="${base}/logs/current.log" property="logExists" />
		<antcall target="copyLog" />
	</target>
	
	<target name="copyLog" if="logExists" >
		<copy file="${base}/logs/current.log" tofile="${dropLocation}/buildLog-${buildLabel}.txt" />
	</target>
	
	<target name="launchWebIDE" if="launchWebIDE" >
		<exec executable="bash" >
			<arg value="${builder}/scripts/launchWebIDE.sh" />
			<arg value="-archive" />
			<arg value="${buildDirectory}/${buildLabel}/${archiveNamePrefix}-linux.gtk.x86.zip"/>
		</exec>
		<echo message="${buildLabel}" file="/web/http/build.label" />
	</target>
	
</project>
