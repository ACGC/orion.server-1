<!--
 Copyright (c) 2011 IBM Corporation and others.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html

 Contributors:
     IBM Corporation - initial API and implementation
-->

<project name="Orion-Tests" default="runTests">

	<target name="runTests" >
		<antcall target="junitTests" />
		<antcall target="jsTests" />
		<antcall target="processResults" />
	</target>

	<target name="buildTests" >
		<ant antfile="${eclipse.pdebuild.scripts}/build.xml" >
			<property name="topLevelElementId" value="org.eclipse.orion.releng.test.master" />
			<property name="customTargets" value="${builder}/customTargets-Tests.xml"/>
			<property name="product" value="" />
			<property name="skipMirroring" value="true" />
			<property name="skipDirector" value="true" />
		</ant>
	</target>
	
	<target name="initProperties" >
		<property file="${builder}/build.properties" />
	</target>
	
	<target name="installTests" depends="buildTests,initProperties">
		<!-- combine the build repo with the platform repo -->
		<p2.composite.repository destination="file:${buildDirectory}/test/composite">
			<add location="file:${buildDirectory}/buildRepo" />
			<add location="${eclipsePlatformRepo}"/>
		</p2.composite.repository>
		
		<!-- install server + tests feature -->
		<p2.director flavor="tooling" roaming="true" profile="OrionTests"  
					 extraArguments="-profileProperties org.eclipse.update.install.features=true"
					 metadataRepository="file:${buildDirectory}/test/composite"
					 artifactRepository="file:${buildDirectory}/test/composite" 
					 destination="${buildDirectory}/test/eclipse"
					 logFile="${p2.director.log}">
			<iu id="org.eclipse.orion" />
			<iu id="org.eclipse.orion.server.tests.feature.feature.group" />
			<iu id="org.eclipse.test" />
			<iu id="org.eclipse.ant.optional.junit" />
		</p2.director>
	</target>
	
	<target name="junitTests" depends="installTests">
		<dirset id="testLib.ref" dir="${buildDirectory}/test/eclipse/plugins" includes="org.eclipse.test_*" />
		<property name="testLibrary" refid="testLib.ref" />
		
		<subant target="run">
			<property name="junit-stylesheet" value="${buildDirectory}/test/eclipse/plugins/${testLibrary}/JUNIT.XSL" />
            <property name="library-file" value="${buildDirectory}/test/eclipse/plugins/${testLibrary}/library.xml" />
			<property name="eclipse-home" value="${buildDirectory}/test/eclipse" />
			<fileset dir="${buildDirectory}/test/eclipse/plugins" includes="*/test.xml" excludes="org.eclipse.core.tests.resources_*/*" />
			<property name="os" value="${osgi.os}" />
			<property name="ws" value="${osgi.ws}" />
			<property name="arch" value="${osgi.arch}" />
		</subant>
		
	</target>
	
	<target name="jsTests" >
		<!-- js tests need dojo extracted -->
		<mkdir dir="${buildDirectory}/org.dojotoolkit" />
		<unzip dest="${buildDirectory}/org.dojotoolkit">
			<fileset dir="${buildDirectory}/buildRepo/plugins" includes="org.dojotoolkit_1.5.0.*.jar" />
		</unzip>
		
		<echo message="Launching Xvfb" />
		<exec executable="bash" failonerror="false" outputproperty="xvfbPID" >
			<arg value="${builder}/scripts/runTests.sh" />
			<arg line="-xvfb" />
		</exec>
		
		<exec executable="bash" failonerror="false" outputproperty="serverPID" >
			<arg value="${builder}/scripts/runTests.sh" />
			<arg value="-server" />
			<arg value="${buildDirectory}/test/eclipse" />
		</exec>
		
		<apply executable="bash" parallel="false">
			<arg value="${builder}/scripts/runTests.sh" />
			<arg line="-id ${buildLabel}" />
			<arg value="-root" />
			<arg value="${base}" />
			<arg value="-javaHome"/>
			<arg value="${java.home}"/>
			<arg value="-testConf" />
			<fileset dir="${buildDirectory}/plugins" includes="**/jsTestDriver.conf" />
		</apply>
	
		<condition property="killXvfb" >
			<not><or>
				<length string="${xvfbPID}" length="1" />
				<length string="${xvfbPID}" length="2" />
			</or></not>
		</condition>
		
		<condition property="killServer" >
			<not><or>
				<length string="${serverPID}" length="1" />
				<length string="${serverPID}" length="2" />
			</or></not>
		</condition>
		
		<antcall target="killXvfb" />
		<antcall target="killServer" />
	</target>
		
	<target name="killXvfb" if="killXvfb">
		<exec executable="kill">
			<arg value="${xvfbPID}" />
		</exec>
	</target>
	
	<target name="killServer" if="killServer">
		<exec executable="kill">
			<arg value="${serverPID}" />
		</exec>
	</target>
	
	<macrodef name="updateTestResult">
		<attribute name="testFile" />
		<attribute name="token" />
		<sequential>
			<loadfile srcfile="${dropLocation}/@{testFile}" property="@{testFile}_status" failonerror="false" >
				<filterchain>
					<linecontainsregexp>
						<regexp pattern=".*&lt;td&gt;[0-9]*&lt;/td&gt;&lt;td&gt;[0-9]*&lt;/td&gt;&lt;td&gt;(NaN|([.0-9]*%))&lt;/td&gt;.*" />
					</linecontainsregexp>
					<replaceregex pattern=".*&lt;td&gt;(NaN|([0-9]+[.][0-9]+%))&lt;/td&gt;.*" replace="\1" />
					<striplinebreaks/>
				</filterchain>
			</loadfile>
			<condition property="@{testFile}_value" value="${@{testFile}_status}" else="DNF" >
				<isset property="@{testFile}_status" />
			</condition>
			<condition property="@{testFile}_result" value="${@{testFile}_value}" else="&lt;font color=&quot;#ff0000&quot;&gt;${@{testFile}_value}&lt;/font&gt;">
				<equals arg1="${@{testFile}_value}" arg2="100.00%" />
			</condition>
			<replace file="${dropLocation}/index.html">
				<replacefilter token="@{token}" value="${@{testFile}_result}" />
			</replace>
		</sequential>
	</macrodef>
	
	<target name="processResults" >
		<property name="dropLocation" value="${buildDirectory}/${buildLabel}/drop" />
		<property name="jsTestDir" value="${base}/tests/${buildLabel}" />
		
		<!-- js unit results -->
		<junitreport todir="${dropLocation}" tofile="testResults.xml">
			<fileset dir="${jsTestDir}" includes="**/*.xml" />
		</junitreport>
		<xslt style="${builder}/html/JUNIT.XSL" in="${dropLocation}/testResults.xml" out="${dropLocation}/testResults.html" />
		<delete file="${dropLocation}/testResults.xml" />
		
		<!-- junit results -->
		<xslt style="${builder}/html/JUNIT.XSL" basedir="${buildDirectory}/test/eclipse/results" destdir="${dropLocation}" includes="*.xml" />
		
		<!-- update the test status -->
		<updateTestResult testFile="testResults.html" token="@JSUNIT@"/>
		<updateTestResult testFile="org.eclipse.orion.server.tests.AllServerTests.html" token="@SERVER-TESTS@"/>
	</target>
</project>